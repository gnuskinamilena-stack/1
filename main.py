# main.py
# –¢—Ä–µ–±—É–µ—Ç—Å—è: pip install aiogram aiohttp python-dotenv
import asyncio, os, re, json, time
from pathlib import Path
from statistics import mean
import aiohttp
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv

# ---------------- ENV ----------------
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

CHECK_INTERVAL = 5          # –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
ANOMALY_DROP_PERCENT = 70   # –ø–∞–¥–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–π, % (>= 70%)
NEED_HISTORY_MIN = 3        # –º–∏–Ω–∏–º—É–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Ü–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π
REPOST_AFTER_SEC = 24 * 3600
PRICE_MEMORY = 50

HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
                  "(KHTML, like Gecko) Chrome/124.0 Safari/537.36"
}

# ---------------- TELEGRAM ----------------
bot = Bot(TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start(msg: Message):
    await msg.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: –º–æ–Ω–∏—Ç–æ—Ä—é Wildberries + –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç. –ü—É–±–ª–∏–∫—É—é –∞–Ω–æ–º–∞–ª—å–Ω–æ –¥–µ—à—ë–≤—ã–µ —Ç–æ–≤–∞—Ä—ã.")

# ---------------- STORAGE ----------------
DATA = Path("data"); DATA.mkdir(exist_ok=True)
WB_PRICES = DATA / "prices_wb.json"     # id -> [prices]
YM_PRICES = DATA / "prices_ym.json"     # id -> [prices]
HISTORY   = DATA / "history.json"       # key -> {"last_price": float, "last_post_ts": int}

def _load(p: Path):
    if not p.exists(): return {}
    try:
        return json.loads(p.read_text("utf-8"))
    except:
        return {}

def _save(p: Path, obj):
    tmp = p.with_suffix(".tmp")
    tmp.write_text(json.dumps(obj, ensure_ascii=False, indent=2), "utf-8")
    tmp.replace(p)

wb_prices = _load(WB_PRICES)
ym_prices = _load(YM_PRICES)
history   = _load(HISTORY)

def _upd_price(store: dict, pid: str, price: float):
    arr = store.get(pid, [])
    arr.append(float(price))
    if len(arr) > PRICE_MEMORY:
        arr = arr[-PRICE_MEMORY:]
    store[pid] = arr

def _avg(store: dict, pid: str):
    arr = store.get(pid, [])
    return mean(arr) if arr else None

def _drop(old: float, new: float) -> float:
    if not old or old <= 0: return 0.0
    return max(0.0, (old - new) / old * 100.0)

def _may_post(key: str, price: float) -> bool:
    """–ù–µ —Å–ª–∞—Ç—å –¥—É–±–ª–∏; –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 24—á ‚Äî —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–≤—Ç–æ—Ä."""
    now = int(time.time())
    rec = history.get(key)
    if rec is None:
        history[key] = {"last_price": price, "last_post_ts": 0}
        return True
    # –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –º–µ–Ω—è–ª–∞—Å—å –∏ –ø–æ—Å—Ç –±—ã–ª < 24—á –Ω–∞–∑–∞–¥ ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
    if abs(rec["last_price"] - price) < 1e-6 and (now - rec["last_post_ts"]) < REPOST_AFTER_SEC:
        return False
    # –∏–Ω–∞—á–µ –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∏—Ç—å (–∏–ª–∏ –ø—Ä–æ—à–ª–æ 24—á, –∏–ª–∏ —Ü–µ–Ω–∞ –Ω–æ–≤–∞—è)
    return True

def _mark_posted(key: str, price: float):
    history[key] = {"last_price": price, "last_post_ts": int(time.time())}
    _save(HISTORY, history)

# ---------------- FETCHERS ----------------
async def fetch_wb(session: aiohttp.ClientSession, query: str, page: int = 1):
    """–ü–æ–∏—Å–∫ WB: –±–µ—Ä—ë–º –≤—ã–¥–∞—á—É –∏ —Ç—è–Ω–µ–º —Ü–µ–Ω—É/—Å—Å—ã–ª–∫—É. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–¥–∞–¥–∏–º —á–µ—Ä–µ–∑ –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏."""
    url = ("https://search.wb.ru/exactmatch/ru/common/v4/search"
           f"?appType=1&curr=rub&dest=-1257786&query={query}&page={page}")
    async with session.get(url, headers=HEADERS, timeout=20) as r:
        data = await r.json(content_type=None)
    prods = data.get("data", {}).get("products", []) or []
    out = []
    for p in prods:
        pid = str(p.get("id"))
        name = p.get("name") or "–¢–æ–≤–∞—Ä"
        price = (p.get("salePriceU") or 0) / 100
        if price <= 0:
            continue
        link = f"https://www.wildberries.ru/catalog/{pid}/detail.aspx"
        out.append({
            "key": f"wb:{pid}",
            "id": pid,
            "name": name,
            "price": float(price),
            "source": "Wildberries",
            "link": link
        })
    return out

async def fetch_ym(session: aiohttp.ClientSession, query: str, page: int = 1):
    """–õ—ë–≥–∫–∏–π –ø–∞—Ä—Å–µ—Ä –Ø.–ú–∞—Ä–∫–µ—Ç–∞ ‚Äî —Ç—è–Ω–µ–º —Ü–µ–Ω—ã –∏–∑ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –±–µ–∑ —Ç—è–∂—ë–ª—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤."""
    url = f"https://market.yandex.ru/search?text={query}&page={page}"
    async with session.get(url, headers=HEADERS, timeout=25) as r:
        html = await r.text()
    out = []
    blocks = html.split('data-auto="serp-item"')
    # —Ü–µ–Ω–∞: aria-label="... 12 345 ‚ÇΩ"; id: data-sku= –∏–ª–∏ data-product-id=
    price_re = re.compile(r'aria-label="[^"]*?(\d[\d\s]+)\s*‚ÇΩ"', re.U)
    id_re    = re.compile(r'data-(?:sku|product-id)="([^"]+)"')
    name_re  = re.compile(r'(?:title|alt)="([^"]{10,160})"')
    for b in blocks[:40]:
        mprice = price_re.search(b)
        mid    = id_re.search(b)
        if not (mprice and mid):
            continue
        price = float(re.sub(r"[^\d]", "", mprice.group(1)))
        pid = mid.group(1)
        mname = name_re.search(b)
        name = mname.group(1).strip() if mname else "–¢–æ–≤–∞—Ä"
        link = f"https://market.yandex.ru/product--{pid}"
        out.append({
            "key": f"ym:{pid}",
            "id": pid,
            "name": name,
            "price": price,
            "source": "–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç",
            "link": link
        })
    return out

# ---------------- CORE ----------------
POPULAR_QUERIES = [
    # —à–∏—Ä–æ–∫–∏–π –æ—Ö–≤–∞—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    "—Å–º–∞—Ä—Ç—Ñ–æ–Ω","–Ω–æ—É—Ç–±—É–∫","–ø–ª–∞–Ω—à–µ—Ç","–Ω–∞—É—à–Ω–∏–∫–∏","—Ç–µ–ª–µ–≤–∏–∑–æ—Ä","–∫–æ–ª–æ–Ω–∫–∞","–ø—ã–ª–µ—Å–æ—Å","–∫—Ä–µ—Å–ª–æ","—Å—Ç—É–ª",
    "–∫—Ä–æ—Å—Å–æ–≤–∫–∏","–±–æ—Ç–∏–Ω–∫–∏","–∫—É—Ä—Ç–∫–∞","–ø–ª–∞—Ç—å–µ","–¥–∂–∏–Ω—Å—ã","–∏–≥—Ä—É—à–∫–∞","–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä","LEGO",
    "–¥—É—Ö–∏","—à–∞–º–ø—É–Ω—å","–∫—Ä–µ–º","—á–∞–π–Ω–∏–∫","–∫–æ—Ñ–µ–≤–∞—Ä–∫–∞","–º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞","–±–ª–µ–Ω–¥–µ—Ä","SSD","–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞",
    "apple","samsung","xiaomi","dyson","philips","sony"
]

async def process_items(items, prices_store: dict, store_name: str):
    """–û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–æ–º–∞–ª–∏—é –∏ –ø—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç—ã."""
    posted = 0
    for it in items:
        key, name, price, source, link = it["key"], it["name"], it["price"], it["source"], it["link"]

        # –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
        _upd_price(prices_store, it["id"], price)
        avg_prev = _avg(prices_store, it["id"])
        # –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞–ª–æ, –Ω–µ –ø—É–±–ª–∏–∫—É–µ–º (—Å–Ω–∞—á–∞–ª–∞ –Ω–∞–±–∏—Ä–∞–µ–º –±–∞–∑—É 2-3 –∏—Ç–µ—Ä–∞—Ü–∏–∏)
        if len(prices_store.get(it["id"], [])) < NEED_HISTORY_MIN:
            continue

        drop_pct = _drop(avg_prev, price)
        if drop_pct < ANOMALY_DROP_PERCENT:
            continue

        # –∞–Ω—Ç–∏–¥—É–±–ª—å / 24—á
        if not _may_post(key, price):
            continue

        text = (
            "üî• <b>–ê–Ω–æ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞</b>\n"
            f"üì¶ <b>{name}</b>\n"
            f"üí∏ –¶–µ–Ω–∞: <b>{int(price):,} ‚ÇΩ</b>\n"
            f"üìâ –ü–∞–¥–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–π: <b>‚àí{int(drop_pct)}%</b>\n"
            f"üõí –ú–∞–≥–∞–∑–∏–Ω: {source}\n"
            f"üîó <a href='{link}'>–û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä</a>"
        ).replace(",", " ")

        try:
            # –í–ê–ñ–ù–û: –Ω–µ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é ‚Äî Telegram –ø–æ–¥–≥—Ä—É–∑–∏—Ç —Ñ–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ
            await bot.send_message(CHANNEL_ID, text, parse_mode="HTML", disable_web_page_preview=False)
            _mark_posted(key, price)
            posted += 1
            print(f"[POST] {source}: {name[:50]}... {price} ‚ÇΩ (‚àí{int(drop_pct)}%)")
        except Exception as e:
            print("TG send error:", e)

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
    if store_name == "wb":
        _save(WB_PRICES, prices_store)
    else:
        _save(YM_PRICES, prices_store)
    if posted:
        _save(HISTORY, history)

async def monitor_loop():
    async with aiohttp.ClientSession() as s:
        qi = 0
        while True:
            query = POPULAR_QUERIES[qi % len(POPULAR_QUERIES)]
            qi += 1
            try:
                print(f"[WB] –ü—Ä–æ–≤–µ—Ä—è—é: {query}")
                wb_items = await fetch_wb(s, query, page=1)
                await process_items(wb_items, wb_prices, "wb")
            except Exception as e:
                print("WB fetch error:", e)

            try:
                print(f"[YM] –ü—Ä–æ–≤–µ—Ä—è—é: {query}")
                ym_items = await fetch_ym(s, query, page=1)
                await process_items(ym_items, ym_prices, "ym")
            except Exception as e:
                print("YM fetch error:", e)

            await asyncio.sleep(CHECK_INTERVAL)

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ WB + –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç...")
    await asyncio.gather(dp.start_polling(bot), monitor_loop())

if __name__ == "__main__":
    asyncio.run(main())
